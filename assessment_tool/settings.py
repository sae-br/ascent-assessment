"""
Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


from dotenv import load_dotenv
from pathlib import Path
import os
import dj_database_url


BASE_DIR = Path(__file__).resolve().parent.parent

# Environment selection
DJANGO_ENV = os.getenv("DJANGO_ENV", "local").lower()  # "local" or "production"
IS_PRODUCTION = DJANGO_ENV == "production"

# Only load .env.local for local dev. In production, rely on Render env vars.
if not IS_PRODUCTION:
    load_dotenv(BASE_DIR / ".env.local")

# Env helpers
def env_bool(key, default=False):
    return str(os.getenv(key, str(default))).lower() in ("1", "true", "yes", "on")

def env_list(key, default=""):
    raw = os.getenv(key, default)
    return [x.strip() for x in raw.split(",") if x.strip()]

DEBUG = env_bool("DEBUG", not IS_PRODUCTION)  # True locally unless you override

ALLOWED_HOSTS = env_list("ALLOWED_HOSTS", "127.0.0.1,localhost")
CSRF_TRUSTED_ORIGINS = env_list("CSRF_TRUSTED_ORIGINS", "http://127.0.0.1:8000")
SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-change-me")
BASE_URL = os.getenv("BASE_URL", "http://127.0.0.1:8000")

# behind a proxy (Render):
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = IS_PRODUCTION
SECURE_HSTS_SECONDS = 300 if IS_PRODUCTION else 0
SESSION_COOKIE_SECURE = IS_PRODUCTION
CSRF_COOKIE_SECURE = IS_PRODUCTION

SECURE_HSTS_INCLUDE_SUBDOMAINS = False   # set True later only if *all* subdomains are HTTPS
SECURE_HSTS_PRELOAD = False              # enable later after youâ€™re confident

# (Nice-to-have headers)
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = "same-origin"
X_FRAME_OPTIONS = "DENY"  # or "SAMEORIGIN" if you truly need framing


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [ BASE_DIR / "static" ]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Application definition

INSTALLED_APPS = [
    # default Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # my apps
    'apps.accounts.apps.AccountsConfig',
    'apps.teams.apps.TeamsConfig',
    'apps.assessments.apps.AssessmentsConfig',
    'apps.reports.apps.ReportsConfig',
    'apps.dashboard.apps.DashboardConfig',
    'apps.pdfexport',
    'apps.common',
    # third party
    'storages',
    'markdownx',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'assessment_tool.urls'

# Enable markdown support
# (no config needed unless customizing filters)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],  # global templates
        'APP_DIRS': True,  # enables app/templates/ lookup
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', 
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.common.context_processors.current_section',
            ],
        },
    },
]


WSGI_APPLICATION = 'assessment_tool.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    "default": dj_database_url.parse(
        os.getenv("DATABASE_URL", "postgresql://assessuser:DBAccess1@localhost/assessmvp_db"),
        conn_max_age=600,
        ssl_require=IS_PRODUCTION, 
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# ACCOUNT LOGIN
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/dashboard/'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Admins / email identities ---
SUPERADMIN_EMAIL = os.getenv('SUPERADMIN_EMAIL')

ADMINS = []
_admins_env = os.getenv("ADMINS", "").strip()
if _admins_env:
    parts = [p.strip() for p in _admins_env.split(",") if p.strip()]
    for p in parts:
        if "<" in p and ">" in p:
            name = p.split("<")[0].strip()
            email = p[p.find("<")+1:p.find(">")].strip()
        else:
            name, email = p, p
        ADMINS.append((name, email))

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
SERVER_EMAIL = os.getenv("SERVER_EMAIL", DEFAULT_FROM_EMAIL)  


# DocRaptor
DOCRAPTOR_API_KEY = os.getenv("DOCRAPTOR_API_KEY", "")
DOCRAPTOR_TEST = env_bool("DOCRAPTOR_TEST", True)

# --- AWS / S3 (Reports storage) ---
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME", "")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "")  # e.g., "ca-central-1"
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY", "")

# We use boto3 on the server to:
#  - upload the final PDF to a private S3 bucket
#  - generate short-lived pre-signed GET URLs for users to download
# Because downloads are simple redirects (not AJAX), no CORS is needed.
# We do NOT change DEFAULT_FILE_STORAGE; static files remain on WhiteNoise.

# Where to place report PDFs within the bucket
REPORTS_S3_PREFIX = os.getenv("REPORTS_S3_PREFIX", "final-reports/")

# Signature version for pre-signed URLs
AWS_S3_SIGNATURE_VERSION = os.getenv("AWS_S3_SIGNATURE_VERSION", "s3v4")


# --- Email backend selection (console for dev, SMTP for prod) ---
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = os.getenv(
        "EMAIL_BACKEND",
        "django.core.mail.backends.smtp.EmailBackend",
    )
    EMAIL_HOST = os.getenv("EMAIL_HOST", "")
    EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
    EMAIL_USE_TLS = env_bool("EMAIL_USE_TLS", True)
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")


# --- Logging ---
LOG_LEVEL = os.getenv("LOG_LEVEL", "DEBUG" if DEBUG else "INFO").upper()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,

    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },

    "formatters": {
        "simple": {
            "format": "%(levelname)s %(name)s: %(message)s"
        },
        "verbose": {
            "format": "%(asctime)s %(levelname)s %(name)s [%(process)d:%(thread)d] %(message)s"
        },
    },

    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "ERROR",  # send only errors/tracebacks
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_false"],  
        },
    },

    # Default: log to console at LOG_LEVEL
    "root": {
        "handlers": ["console"],
        "level": LOG_LEVEL,
    },

    # Django request logger: email 500s in production
    "loggers": {
        "django.request": {
            "handlers": ["mail_admins", "console"],
            "level": "WARNING",
            "propagate": True,
        },
        "apps.assessments": {"level": "INFO"},
        "apps.reports": {"level": "INFO"},
        "apps.teams": {"level": "INFO"},
    },
}